//
//  EmojiMemoryGame.swift
//  mysys
//
//  Created by Bruno Angst on 23/04/23.
//  A classe possui um array de emojis que ser√£o usados no jogo e um m√©todo est√°tico createMemoryGame() que cria um objeto MemoryGame do tipo gen√©rico String. Esse objeto tem um n√∫mero fixo de pares de cartas que correspondem aos emojis definidos no array. Cada carta cont√©m uma string de emoji.

//  A classe tamb√©m possui uma propriedade cards que retorna uma matriz de cartas de mem√≥ria. Essa matriz √© obtida a partir do modelo interno da classe MemoryGame que foi criado usando o m√©todo createMemoryGame().

//  O objetivo deste c√≥digo √© criar um jogo da mem√≥ria b√°sico usando o padr√£o MVVM, onde a classe EmojiMemoryGame atua como o ViewModel, criando o modelo de jogo e fornecendo os dados para exibi√ß√£o na interface do usu√°rio (que seria a View no padr√£o MVVM).

//  ma classe EmojiMemoryGame que usa o framework SwiftUI. Essa classe √© um objeto observ√°vel, o que significa que qualquer altera√ß√£o em seus dados internos (publicados) √© notificada automaticamente a todos os objetos que os est√£o observando.

// O objetivo desta classe √© fornecer um modelo de jogo de mem√≥ria de emojis, onde o jogador deve encontrar pares de cartas com o mesmo emoji. O array est√°tico "emojis" cont√©m os emojis que ser√£o usados no jogo. O m√©todo est√°tico "createMemoryGame" √© usado para criar uma inst√¢ncia de MemoryGame, que √© outra classe utilizada nesse c√≥digo e que implementa a l√≥gica do jogo em si. Este m√©todo recebe como par√¢metro o n√∫mero de pares de cartas que devem ser criados e uma fun√ß√£o que define qual emoji ser√° atribu√≠do a cada par.

// A propriedade "model" √© do tipo MemoryGame<String>, e √© inicializada com a chamada ao m√©todo "createMemoryGame()". Como essa propriedade √© marcada com "@Published", qualquer altera√ß√£o nela ser√° notificada automaticamente a todos os objetos que a est√£o observando.

// Por fim, temos um m√©todo "choose" que √© usado para informar ao modelo que o usu√°rio escolheu uma determinada carta. Essa escolha √© repassada para o m√©todo "choose" da inst√¢ncia de MemoryGame, que atualiza o estado do jogo.

// Em resumo, esse c√≥digo define uma classe que implementa a l√≥gica do jogo de mem√≥ria de emojis, usando o padr√£o de design Modelo-Vis√£o-Controle (MVC) e o padr√£o de programa√ß√£o reativa atrav√©s do uso do "@Published". O SwiftUI √© usado para criar a interface do usu√°rio do jogo, que n√£o est√° presente neste c√≥digo em si.

import SwiftUI

class EmojiMemoryGame: ObservableObject {
    
    static let emojis = ["üöó", "üöï", "üöô", "üöå", "üöé", "üèé", "üöì", "üöë", "üöí", "üöê", "üõª", "üöö", "üöõ", "üöú", "ü¶Ø", "ü¶Ω", "ü¶º", "üõ¥", "üö≤", "üõµ", "üèç", "üõ∫", "üöî", "üöç", "üöò", "üöñ", "üö°", "üö†", "üöü", "üöÉ", "üöã"]
    
    static func createMemoryGame() -> MemoryGame<String> {
        MemoryGame<String>(numberOfPairsOfCards: 3) { pairIndex in
            emojis[pairIndex]
        }
    }
    
    @Published private var model: MemoryGame<String> = createMemoryGame()
    
    var cards: Array<MemoryGame<String>.Card> {
        model.cards
    }
    
    // MARK: - Intent(s)
    
    func choose(_ card: MemoryGame<String>.Card) {
        model.choose(card)
    }
}
